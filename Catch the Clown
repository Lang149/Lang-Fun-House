import pygame as py
import copy as co

py.init()

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
RED = (120, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
CYAN = (0, 255, 255)
MAGENTA = (255, 0, 255)
Transparent = (0,0,0, 255)
Mouse_Radius = 3
Buffer = 20

Width = 945
Length = 600
Margin = 100
Display_Window = py.display.set_mode((Width, Length))
Boarder = 5
Boarder_Width = Width - Boarder
Boarder_Length = Length - Boarder
Window_Rect = Display_Window.get_rect()
Player_Lives = 5
Player_Starting_Lives = co.deepcopy(Player_Lives)
Score = 0
Clown_Starting_velocity = [3,2]
Clown_Velocity = co.deepcopy(Clown_Starting_velocity)
Clown_Acceleration = 0.1


FPS = 144
clock = py.time.Clock()

background_image = py.image.load("Background1.png")
background_image = py.transform.scale(background_image, (Width, Length))

Souls_Font_Size = 50
Lives_font = py.font.Font('soulsfont.ttf', Souls_Font_Size)
Lives_text = Lives_font.render(f"LIVES = {Player_Lives}/{Player_Starting_Lives}", True, BLUE)
Lives_text_rect = Lives_text.get_rect()
Living_text_Width, Living_text_Length = Lives_text.get_size()
Lives_text_rect.center = (Width - (Buffer + Living_text_Width), Buffer + Living_text_Length)

Score_font_Size = 50
Score_font = py.font.Font('JerseySharp.ttf', Score_font_Size)
Score_text = Score_font.render(f"SCORE = {Score}", True, WHITE)
Score_text_rect = Score_text.get_rect()
Score_text_width, Score_text_Length = Score_text.get_size()
Score_text_rect.topleft = (Buffer + Score_text_width, Buffer + Score_text_Length)

Clown = py.image.load('Guts.png')
py.transform.scale(Clown,(Width/ 100, Length/100))
Clown_Rect = Clown.get_rect()
Clown_Width, Clown_Length = Clown.get_size()
Clown_Rect.center = (Width//2, Length//2)
py.Surface((Width, Length), py.SRCALPHA)

#Rectangle(surface, color, (top-left x, top-left y, width, height))
py.draw.rect(Display_Window, BLACK, (500, 0, 100, 100))
py.draw.rect(Display_Window, WHITE, (500, 0, 100, 100))

def is_outside_window(item, window, margin):
    return (
        item.right < window.left - margin or
        item.left > window.right + margin or
        item.bottom < window.top - margin or
        item.top > window.bottom + margin
    )

running = True

while running:
    if Player_Lives <= 0:
        running = False

    mouse_pos = py.mouse.get_pos()
    Mouse_Circle = py.draw.circle(Display_Window, Transparent, mouse_pos, Mouse_Radius)
    # Move the object
    Clown_Rect.x += Clown_Velocity[0]
    Clown_Rect.y += Clown_Velocity[1]

    # Check for collisions with the sides of the window
    if Clown_Rect.left <= 0 + Boarder or Clown_Rect.right >= Boarder_Width:
        Clown_Velocity[0] = -Clown_Velocity[0]  # Reverse x-velocity
    if Clown_Rect.top <= 0 + Boarder or Clown_Rect.bottom >= Boarder_Length:
        Clown_Velocity[1] = -Clown_Velocity[1]  # Reverse y-velocity

    for event in py.event.get():
        if event.type == py.QUIT:
            running = False

        if event.type == py.MOUSEBUTTONDOWN:
            if event.button == 1:
                if Mouse_Circle.colliderect(Clown_Rect):
                    Score += 1
                    Clown_Velocity[0] = -Clown_Velocity[0]
                    Clown_Velocity[1] = -Clown_Velocity[1]
                    # Accelerate the clown after collision
                    Clown_Velocity[0] += Clown_Acceleration if Clown_Velocity[0] > 0 else -Clown_Acceleration
                    Clown_Velocity[1] += Clown_Acceleration if Clown_Velocity[1] > 0 else -Clown_Acceleration
                else:
                    Player_Lives -= 1
                    Lives_text = Lives_font.render(f"LIVES = {Player_Lives}/{Player_Starting_Lives}", True, BLUE)
                    # Reset the clown's velocity to the starting velocity
                    Clown_Velocity = [
                        Clown_Starting_velocity[0] if Clown_Velocity[0] > 0 else -Clown_Starting_velocity[0],
                        Clown_Starting_velocity[1] if Clown_Velocity[1] > 0 else -Clown_Starting_velocity[1]
                    ]

    if is_outside_window(Clown_Rect, Window_Rect,Margin):
        Clown_Rect.center = (Width // 2, Length // 2)
        Display_Window.blit(Clown, Clown_Rect)
        py.time.wait(2000)

    # Clear the screen
    Display_Window.blit(background_image, (0, 0))
    # Draw the object
    Display_Window.blit(Lives_text, Lives_text_rect)
    Display_Window.blit(Clown, Clown_Rect)
    # Update the display
    py.display.flip()


    # Cap the frame rate
    clock.tick(FPS)

py.quit()
